name: Deploy Lambda to AWS

on:
  push:
    branches: [main, master]  # Ajusta seg√∫n tu rama
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  STACK_NAME: order-function-stack
  LAMBDA_PACKAGE_KEY: order_function.zip

  # IDs del API Gateway existente (deben estar definidos en GitHub Secrets)
  REST_API_ID: ${{ secrets.REST_API_ID }}
  ORDER_RESOURCE_ID: ${{ secrets.ORDER_RESOURCE_ID }}
  ROOT_RESOURCE_ID: ${{ secrets.ROOT_RESOURCE_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout del c√≥digo
        uses: actions/checkout@v3

      - name: üß∞ Instalar .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: üõ† Publicar Lambda
        run: dotnet publish ./app/src/AWSLambda/AWSLambda.csproj -c Release -o ./publish

      - name: üì¶ Crear ZIP de Lambda
        run: |
          cd publish
          zip -r ../$LAMBDA_PACKAGE_KEY .
          cd ..

      - name: üßπ Eliminar stack en estado ROLLBACK_COMPLETE (si aplica)
        run: |
          state=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].StackStatus" \
            --output text 2>/dev/null || echo "")

          if [ "$state" == "ROLLBACK_COMPLETE" ]; then
            echo "‚ö†Ô∏è Stack en estado ROLLBACK_COMPLETE. Eliminando..."
            aws cloudformation delete-stack --stack-name "$STACK_NAME"
            aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME"
            echo "‚úÖ Stack eliminado. Listo para recrear."
          else
            echo "Estado actual del stack: $state"
          fi

      - name: üîê Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîç Determinar nombre del bucket
        id: getbucket
        run: |
          bucket=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='LambdaBucketName'].OutputValue" \
            --output text 2>/dev/null)

          if [ -z "$bucket" ] || [ "$bucket" == "None" ]; then
            bucket="order-function-deploy-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.AWS_REGION }}"
            echo "üÜï Usando bucket por defecto: $bucket"
          else
            echo "‚úÖ Usando bucket del stack existente: $bucket"
          fi

          echo "bucket_name=$bucket" >> $GITHUB_OUTPUT

      - name: ü™£ Crear bucket si no existe
        run: |
          BUCKET_NAME="${{ steps.getbucket.outputs.bucket_name }}"

          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "‚úÖ Bucket $BUCKET_NAME ya existe"
          else
            echo "üöÄ Creando bucket $BUCKET_NAME..."
            if [ "$AWS_REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET_NAME"
            else
              aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$AWS_REGION" --create-bucket-configuration LocationConstraint="$AWS_REGION"
            fi
          fi

          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

      - name: ‚òÅÔ∏è Subir ZIP a S3
        run: |
          aws s3 cp $LAMBDA_PACKAGE_KEY s3://$BUCKET_NAME/$LAMBDA_PACKAGE_KEY

      - name: üöÄ Desplegar CloudFormation
        run: |
          aws cloudformation deploy \
            --template-file cloudformation/template.yml \
            --stack-name $STACK_NAME \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              LambdaS3Key=$LAMBDA_PACKAGE_KEY \
              RestApiId=$REST_API_ID \
              OrderResourceId=$ORDER_RESOURCE_ID \
              RootResourceId=$ROOT_RESOURCE_ID
